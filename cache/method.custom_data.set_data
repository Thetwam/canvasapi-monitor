<div class="method_details ">
<h2 class="api_method_name" data-subtopic="Custom Data" name="method.custom_data.set_data">
<a href="#method.custom_data.set_data" name="method.custom_data.set_data">
      Store custom data
    </a>
<span class="defined-in"><a href="https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_data_controller.rb">CustomDataController#set_data</a></span>
</h2>
<h3 class="beta">BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.</h3>
<h3 class="endpoint">
    PUT /api/v1/users/:user_id/custom_data(/*scope)
  </h3>
<p>Store arbitrary user data as JSON.</p>
<p>Arbitrary JSON data can be stored for a User. A typical scenario would be
an external site/service that registers users in Canvas and wants to
capture additional info about them.  The part of the URL that follows
<code>/custom_data/</code> defines the scope of the request, and it
reflects the structure of the JSON data to be stored or retrieved.</p>
<p>The value <code>self</code> may be used for <code>user_id</code> to store
data associated with the calling user. In order to access another
user's custom data, you must be an account administrator with
permission to manage users.</p>
<p>A namespace parameter, <code>ns</code>, is used to prevent custom_data
collisions between different apps.  This parameter is required for all
custom_data requests.</p>
<p>A request with Content-Type multipart/form-data or Content-Type
application/x-www-form-urlencoded can only be used to store strings.</p>
<p>Example PUT with multipart/form-data data:</p>
<pre class="code ruby"><code class="ruby">curl 'https://&lt;canvas&gt;/api/v1/users/&lt;user_id&gt;/custom_data/telephone' \
  -X PUT \
  -F 'ns=com.my-organization.canvas-app' \
  -F 'data=555-1234' \
  -H 'Authorization: Bearer &lt;token&gt;'</code></pre>
<p>Response:</p>
<pre class="code javascript"><code class="javascript">{
  "data": "555-1234"
}
</code></pre>
<p>Subscopes (or, generated scopes) can also be specified by passing values to
<code>data[subscope]</code>.</p>
<p>Example PUT specifying subscopes:</p>
<pre class="code ruby"><code class="ruby">curl 'https://&lt;canvas&gt;/api/v1/users/&lt;user_id&gt;/custom_data/body/measurements' \
  -X PUT \
  -F 'ns=com.my-organization.canvas-app' \
  -F 'data[waist]=32in' \
  -F 'data[inseam]=34in' \
  -F 'data[chest]=40in' \
  -H 'Authorization: Bearer &lt;token&gt;'</code></pre>
<p>Response:</p>
<pre class="code javascript"><code class="javascript">{
  "data": {
    "chest": "40in",
    "waist": "32in",
    "inseam": "34in"
  }
}
</code></pre>
<p>Following such a request, subsets of the stored data to be retrieved
directly from a subscope.</p>
<p>Example <a href="users.html#method.users.get_custom_data" title="GET">GET</a> from a generated scope</p>
<pre class="code ruby"><code class="ruby">curl 'https://&lt;canvas&gt;/api/v1/users/&lt;user_id&gt;/custom_data/body/measurements/chest' \
  -X GET \
  -F 'ns=com.my-organization.canvas-app' \
  -H 'Authorization: Bearer &lt;token&gt;'</code></pre>
<p>Response:</p>
<pre class="code javascript"><code class="javascript">{
  "data": "40in"
}
</code></pre>
<p>If you want to store more than just strings (i.e. numbers, arrays, hashes,
true, false, and/or null), you must make a request with Content-Type
application/json as in the following example.</p>
<p>Example PUT with JSON data:</p>
<pre class="code ruby"><code class="ruby">curl 'https://&lt;canvas&gt;/api/v1/users/&lt;user_id&gt;/custom_data' \
  -H 'Content-Type: application/json' \
  -X PUT \
  -d '{
        "ns": "com.my-organization.canvas-app",
        "data": {
          "a-number": 6.02e23,
          "a-bool": true,
          "a-string": "true",
          "a-hash": {"a": {"b": "ohai"}},
          "an-array": [1, "two", null, false]
        }
      }' \
  -H 'Authorization: Bearer &lt;token&gt;'</code></pre>
<p>Response:</p>
<pre class="code javascript"><code class="javascript">{
  "data": {
    "a-number": 6.02e+23,
    "a-bool": true,
    "a-string": "true",
    "a-hash": {
      "a": {
        "b": "ohai"
      }
    },
    "an-array": [1, "two", null, false]
  }
}
</code></pre>
<p>If the data is an Object (as it is in the above example), then subsets of
the data can be accessed by including the object's (possibly nested)
keys in the scope of a GET request.</p>
<p>Example <a href="users.html#method.users.get_custom_data" title="GET">GET</a> with a generated scope:</p>
<pre class="code ruby"><code class="ruby">curl 'https://&lt;canvas&gt;/api/v1/users/&lt;user_id&gt;/custom_data/a-hash/a/b' \
  -X GET \
  -F 'ns=com.my-organization.canvas-app' \
  -H 'Authorization: Bearer &lt;token&gt;'</code></pre>
<p>Response:</p>
<pre class="code javascript"><code class="javascript">{
  "data": "ohai"
}
</code></pre>
<p>On success, this endpoint returns an object containing the data that was
stored.</p>
<p>Responds with status code 200 if the scope already contained data, and it
was overwritten by the data specified in the request.</p>
<p>Responds with status code 201 if the scope was previously empty, and the
data specified in the request was successfully stored there.</p>
<p>Responds with status code 400 if the namespace parameter, <code>ns</code>,
is missing or invalid, or if the <code>data</code> parameter is missing.</p>
<p>Responds with status code 409 if the requested scope caused a conflict and
data was not stored. This happens when storing data at the requested scope
would cause data at an outer scope to be lost.  e.g., if
<code>/custom_data</code> was <tt>{âfashion_appâ: {âhairâ: âblondeâ}}</tt>, but
you tried to <tt>`PUT /custom_data/fashion_app/hair/style -F data=buzz`</tt>, then
for the request to succeed,the value of
<code>/custom_data/fashion_app/hair</code> would have to become a hash, and
its old string value would be lost.  In this situation, an error object is
returned with the following format:</p>
<pre class="code javascript"><code class="javascript">{
  "message": "write conflict for custom_data hash",
  "conflict_scope": "fashion_app/hair",
  "type_at_conflict": "String",
  "value_at_conflict": "blonde"
}
</code></pre>
<h4>Request Parameters:</h4>
<table class="request-params">
<thead>
<tr>
<th class="param-name">Parameter</th>
<th class="param-req"></th>
<th class="param-type">Type</th>
<th class="param-desc">Description</th>
</tr>
</thead>
<tbody>
<tr class="request-param">
<td>ns</td>
<td>
        
        Required
        
      </td>
<td>string</td>
<td class="param-desc">
<p>The namespace under which to store the data.  This should be something
other Canvas API apps aren't likely to use, such as a reverse DNS for
your organization.</p>
</td>
</tr>
<tr class="request-param">
<td>data</td>
<td>
        
        Required
        
      </td>
<td>JSON</td>
<td class="param-desc">
<p>The data you want to store for the user, at the specified scope.  If the
data is composed of (possibly nested) JSON objects, scopes will be
generated for the (nested) keys (see examples).</p>
</td>
</tr>
</tbody>
</table>
<div class="examples">
<h4>Example Request:</h4>
<h4><div class="inline"></div></h4>
<pre class="example code prettyprint"><code class="language-bash">curl 'https://&lt;canvas&gt;/api/v1/users/&lt;user_id&gt;/custom_data/food_app' \
  -X PUT \
  -F 'ns=com.my-organization.canvas-app' \
  -F 'data[weight]=81kg' \
  -F 'data[favorites][meat]=pork belly' \
  -F 'data[favorites][dessert]=pistachio ice cream' \
  -H 'Authorization: Bearer &lt;token&gt;'</code></pre>
</div>
<div class="examples example_response">
<h4>Example Response:</h4>
<h4><div class="inline"></div></h4>
<pre class="example code prettyprint"><code class="language-js">{
  "data": {
    "weight": "81kg",
    "favorites": {
      "meat": "pork belly",
      "dessert": "pistachio ice cream"
    }
  }
}</code></pre>
</div>
</div>