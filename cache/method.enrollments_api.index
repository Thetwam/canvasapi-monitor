<div class="method_details ">
<h2 class="api_method_name" data-subtopic="Enrollments" name="method.enrollments_api.index">
<a href="#method.enrollments_api.index" name="method.enrollments_api.index">
      List enrollments
    </a>
<span class="defined-in"><a href="https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb">EnrollmentsApiController#index</a></span>
</h2>
<h3 class="endpoint">
    GET /api/v1/courses/:course_id/enrollments
  </h3>
<h3 class="endpoint">
    GET /api/v1/sections/:section_id/enrollments
  </h3>
<h3 class="endpoint">
    GET /api/v1/users/:user_id/enrollments
  </h3>
<p>Depending on the URL given, return a paginated list of either (1) all of
the enrollments in a course, (2) all of the enrollments in a section or (3)
all of a user's enrollments. This includes student, teacher, TA, and
observer enrollments.</p>
<p>If a user has multiple enrollments in a context (e.g. as a teacher and a
student or in multiple course sections), each enrollment will be listed
separately.</p>
<p>note: Currently, only an admin user can return other users'
enrollments. A user can, however, return his/her own enrollments.</p>
<h4>Request Parameters:</h4>
<table class="request-params">
<thead>
<tr>
<th class="param-name">Parameter</th>
<th class="param-req"></th>
<th class="param-type">Type</th>
<th class="param-desc">Description</th>
</tr>
</thead>
<tbody>
<tr class="request-param">
<td>type[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>A list of enrollment types to return. Accepted values are
'StudentEnrollment', 'TeacherEnrollment',
'TaEnrollment', 'DesignerEnrollment', and
'ObserverEnrollment.' If omitted, all enrollment types are
returned. This argument is ignored if `role` is given.</p>
</td>
</tr>
<tr class="request-param">
<td>role[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>A list of enrollment roles to return. Accepted values include course-level
roles created by the <a href="roles.html#method.role_overrides.add_role" title="Add Role API">Add Role API</a> as
well as the base enrollment types accepted by the `type` argument above.</p>
</td>
</tr>
<tr class="request-param">
<td>state[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Filter by enrollment state. If omitted, 'active' and
'invited' enrollments are returned. When querying a user's
enrollments (either via user_id argument or via user enrollments endpoint),
the following additional synthetic states are supported:
âcurrent_and_invitedâ|âcurrent_and_futureâ|âcurrent_and_concludedâ</p>
<p class="param-values">
<span class="allowed">Allowed values:</span> <code class="enum">active</code>, <code class="enum">invited</code>, <code class="enum">creation_pending</code>, <code class="enum">deleted</code>, <code class="enum">rejected</code>, <code class="enum">completed</code>, <code class="enum">inactive</code>
</p>
</td>
</tr>
<tr class="request-param">
<td>include[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Array of additional information to include on the enrollment or user
records. âavatar_urlâ and âgroup_idsâ will be returned on the user record.</p>
<p class="param-values">
<span class="allowed">Allowed values:</span> <code class="enum">avatar_url</code>, <code class="enum">group_ids</code>, <code class="enum">locked</code>, <code class="enum">observed_users</code>, <code class="enum">can_be_removed</code>
</p>
</td>
</tr>
<tr class="request-param">
<td>user_id</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Filter by user_id (only valid for course or section enrollment queries). If
set to the current user's id, this is a way to determine if the user
has any enrollments in the course or section, independent of whether the
user has permission to view other people on the roster.</p>
</td>
</tr>
<tr class="request-param">
<td>grading_period_id</td>
<td>
</td>
<td>integer</td>
<td class="param-desc">
<p>Return grades for the given grading_period.  If this parameter is not
specified, the returned grades will be for the whole course.</p>
</td>
</tr>
<tr class="request-param">
<td>sis_account_id[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Returns only enrollments for the specified SIS account ID(s). Does not look
into subaccounts. May pass in array or string.</p>
</td>
</tr>
<tr class="request-param">
<td>sis_course_id[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Returns only enrollments matching the specified SIS course ID(s). May pass
in array or string.</p>
</td>
</tr>
<tr class="request-param">
<td>sis_section_id[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Returns only section enrollments matching the specified SIS section ID(s).
May pass in array or string.</p>
</td>
</tr>
<tr class="request-param">
<td>sis_user_id[]</td>
<td>
</td>
<td>string</td>
<td class="param-desc">
<p>Returns only enrollments for the specified SIS user ID(s). May pass in
array or string.</p>
</td>
</tr>
</tbody>
</table>



  Returns a list of 

<a href="enrollments.html#Enrollment">Enrollments</a>
</div>